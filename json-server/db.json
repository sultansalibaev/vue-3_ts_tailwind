{
    "posts": [
        {
            "id": 1,
            "title": "json-server",
            "author": "typicode"
        },
        {
            "id": 2,
            "title": "json-server 2",
            "author": "typicode"
        },
        {
            "id": 3,
            "title": "json-server 3",
            "author": "typicode"
        },
        {
            "id": 4,
            "title": "json-server 4",
            "author": "typicode"
        }
    ],
    "articles": [
        {
            "id": 1,
            "author_id": 1,
            "author": {
                "id": 1,
                "email": "person@mail.ru",
                "username": "person"
            },
            "title": "4 важных нововведения в ES2022",
            "views": 1022,
            "createdAt": "2022-02-26T00:00:00",
            "tags": [
                "javascript",
                "es2022",
                "ecmascript 2022"
            ],
            "type": [
                "JavaScript"
            ],
            "blocks": [
                {
                    "type": "image",
                    "src": "https://teknotower.com/wp-content/uploads/2020/11/js.png",
                    "subtitle": "js ES 2022"
                },
                {
                    "type": "image",
                    "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/ad6/0f9/97c/ad60f997cba90689a9d766cb430b9111.png",
                    "subtitle": "js ES 2022"
                },
                {
                    "type": "text",
                    "html": "ECMAScript 2022 - это новый стандарт JavaScript, который будет выпущен в июне 2022 года. Давайте посмотрим на самые важные изменения, которые, наиболее вероятно, должны появиться в новом релизе, так как они достигли уже 4-ой, последней стадии принятия новвоведений в спецификации EcmaScript (<a href=\"https://tc39.es/process-document/\"><span>TC39</span></a>)."
                },
                {
                    "type": "quote",
                    "html": "TC39 - это группа JavaScript разработчиков, которые принимают и выпускают новвоведения. В их процессе добавления улучшений в язык есть 4 стадии, где первая - это просто предложенная идея, а четвертая - обновление, готовое к выпуску в новой версии ECMAScript"
                },
                {
                    "type": "title",
                    "size": "h2",
                    "title": "1. Метод \"at()\" в массивах"
                },
                {
                    "type": "text",
                    "html": "Наконец-то! ES2022 дал нам возможность обращаться к массивам с конца. Это незначительное новшество увеличит удобочитаемость кода при работе с&nbsp;<strong>массивами</strong>&nbsp;и&nbsp;<strong>строками</strong>."
                },
                {
                    "type": "text",
                    "html": "<strong>At()</strong>&nbsp;метод с положительным числом работает так же, как и&nbsp;<strong>[ ]</strong>, но передача отрицательного числа в этот метод позволяет нам получать значения с конца."
                },
                {
                    "type": "text",
                    "html": "Вместо того, чтобы писать:"
                },
                {
                    "type": "code",
                    "language": "JavaScript",
                    "code": "const arr = [1,2,3,4]\narr[arr.length - 2] // 3\narr.slice(-2)[0]    // 3\n\nconst str = \"1234\"\nstr[str.length - 2] // '3'\nstr.slice(-2)[0]    // '3'"
                },
                {
                    "type": "text",
                    "html": "Мы сможем писать:"
                },
                {
                    "type": "code",
                    "language": "JavaScript",
                    "code": "const arr = [1,2,3,4]\narr.at(-2) // 3\n\nconst str = \"1234\"\nstr.at(-2) // '3'"
                },
                {
                    "type": "title",
                    "size": "h2",
                    "title": "2. Error cause"
                },
                {
                    "type": "text",
                    "html": "Свойство <strong>.cause</strong> в объекте ошибки позволяет нам указать, какая ошибка спровоцировала другую ошибку. Довольно очевидно, не так ли? Пример использования данного свойства:"
                },
                {
                    "type": "code",
                    "language": "JavaScript",
                    "code": "try {\n  //Выполняем какое-то действие, которое выбросит ошибку\n  doSomeComputationThatThrowAnError() \n} catch (error) {\n  throw new Error('Я результат другой ошибки', { cause: error })\n}"
                },
                {
                    "type": "text",
                    "html": "<strong>Error cause</strong> будет идеальным решением для связки ошибок в цепочки, подобное есть в других языках программирования, например, в Java."
                },
                {
                    "type": "title",
                    "size": "h2",
                    "title": "3. Ключевое слово \"await\" вне функции"
                },
                {
                    "type": "text",
                    "html": "Знали ли вы, что нельзя использовать <strong>await</strong> в коде вне функции? Если нет, то для вас это не так важно. Но остальные могут быть уверены, что ES2022 изменит это."
                },
                {
                    "type": "title",
                    "size": "h2",
                    "title": "В чём польза?"
                },
                {
                    "type": "list",
                    "list": [
                        "Это позволяет загружать модули динамически"
                    ]
                },
                {
                    "type": "code",
                    "language": "JavaScript",
                    "code": "const serviceName = await fetch(\"https://example.com/what-service-should-i-use\")\nconst service = await import(`/services/${serviceName}.js`)\n\n// ИЛИ\n\nconst params = new URLSearchParams(location.search);\nconst theme = params.get('theme');\nconst stylingFunctions = await import(`/styling-functions-${theme}.js`);"
                },
                {
                    "type": "list",
                    "list": [
                        "Это позволяет загружать модули условно"
                    ]
                },
                {
                    "type": "code",
                    "language": "JavaScript",
                    "code": "const date = new Date()\n\nif(date.getFullYear() === 2023) {\n  await require('/special-code-for-2023-year.js')\n}"
                },
                {
                    "type": "text",
                    "html": "Я почти уверен, что есть и больше вариантов использования обновленного await (возможно, менее абстрактного, чем в приведенных примерах). Пишите свои примеры в комментариях!"
                },
                {
                    "type": "title",
                    "size": "h2",
                    "title": "4. Приватные поля и методы"
                },
                {
                    "type": "text",
                    "html": "Классы в JavaScript были представлены еще в ES6, но их реализация едва ли соответствовала ООП. Много разработчиков использовали TypeScript для включения некоторых новых возможностей, а сейчас мы можем их использовать в чистом JavaScript."
                },
                {
                    "type": "text",
                    "html": "<strong>Приватные поля</strong> или же <strong>свойства</strong> - одна из этих возможностей. ES2022 даёт нам возможность создавать их и получать ошибку, когда мы пытаемся к ним обратиться, находясь вне класса. Аналогично и с приватными методами. Интересно, что команда JavaScript решила использовать <strong>#</strong> в виде префикса для обозначения подобных полей."
                },
                {
                    "type": "text",
                    "html": "Пример приватного поля:"
                },
                {
                    "type": "code",
                    "language": "JavaScript",
                    "code": "class Human {\n  #name = \"John\";\n  \n  setName(name) {\n    this.#name = name;\n  }\n}\n\nconst human = new Human()\nhuman.#name = 'Amy'  // ОШИБКА!\nhuman.setName('Amy') // ОК"
                },
                {
                    "type": "text",
                    "html": "И приватного метода:"
                },
                {
                    "type": "code",
                    "language": "JavaScript",
                    "code": "class Human {\n  name = \"John\";\n  \n  constructor(name) {\n    this.#setName('Amy') // OK\n  }\n  \n  #setName(name) {\n    this.name = name;\n  }\n}\n\nconst human = new Human()\nhuman.#setName('Amy') // ОШИБКА!"
                },
                {
                    "type": "title",
                    "size": "h2",
                    "title": "Итог"
                },
                {
                    "type": "text",
                    "html": "Список неполный, но я выбрал, по моему мнению, наиболее важные и полезные обновления в новом выпуске. Вы можете найти все улучшения <a href=\"https://exploringjs.com/impatient-js/ch_new-javascript-features.html#new-in-es2022\" rel=\"noopener noreferrer nofollow\">здесь</a>. Дайте знать, какие фичи вам больше всего понравились, и какими вы планируете пользоваться."
                },
                {
                    "type": "text",
                    "html": "<strong>P.S.</strong> Это был мой первый перевод. А вот <a href=\"https://medium.com/@bsalwiczek/4-most-important-features-coming-in-es2022-that-you-should-know-about-f7e18c1bff9b\" rel=\"noopener noreferrer nofollow\">оригинальная статья</a>."
                }
            ]
        }
    ],
    "comments": [
        {
            "id": 1,
            "text": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda delectus ducimus enim ex id labore maxime nesciunt, omnis porro quas quia quod ratione rem rerum tempora ullam velit?",
            "articleId": 1,
            "userId": 1
        },
        {
            "id": 2,
            "text": "Aspernatur assumenda aut commodi esse fugit maiores minima porro praesentium, sit vitae? Ab facilis officia quod tempora veniam.",
            "articleId": 1,
            "userId": 2
        },
        {
            "id": 3,
            "text": "Aliquid autem error in, laborum nisi odio sit velit vitae! Aliquid eveniet id illo illum nisi quam quasi, reiciendis tenetur? Beatae dolorum esse et eveniet explicabo fuga itaque iure maiores molestiae nobis, non nulla numquam perspiciatis, possimus quam reiciendis vero voluptates!",
            "articleId": 1,
            "userId": 3
        },
        {
            "articleId": 1,
            "userId": 1,
            "text": "Screenshot the RNG with the chosen number so if anyone questions you you have proof",
            "createdAt": 1710708213408,
            "id": 4
        }
    ],
    "users": [
        {
            "id": 1,
            "email": "in7678523@gmail.com",
            "password": "123456789",
            "username": "Sula",
            "avatar": "https://pic.rutubelist.ru/user/3b/27/3b2758ad5492a76b578f7ee072e4e894.jpg",
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJlbWFpbCI6ImluNzY3ODUyM0BnbWFpbC5jb20iLCJwYXNzd29yZCI6IjEyMzQ1Njc4OSJ9LCJpYXQiOjE3MTI5NTI0NDgsImV4cCI6MTcxMjk1OTY0OH0.C1n6bult4knoAFA5rX8W8Kaxb4rUqH36mlln2Ky9dFQ",
            "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJlbWFpbCI6ImluNzY3ODUyM0BnbWFpbC5jb20iLCJwYXNzd29yZCI6IjEyMzQ1Njc4OSJ9LCJpYXQiOjE3MTI5NTIxMjEsImV4cCI6MTcxNDE2MTcyMX0.cXd9bn6laNcJHi4dj_ktzBwMKlKPW9WOU8WFgBf6Pp8"
        },
        {
            "id": 2,
            "email": "in7678523@gmail.com",
            "username": "Hacker",
            "avatar": "https://www.soscanhelp.com/hs-fs/hubfs/Dark%20Web%20Hacker%20Blue%20Glow.jpeg?width=3008&name=Dark%20Web%20Hacker%20Blue%20Glow.jpeg"
        },
        {
            "id": 3,
            "email": "in7678523@gmail.com",
            "username": "Venom",
            "avatar": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQmCeoiFRRe104G9VRAR7esff5uL0XtcL7O6QtXZ2Z_bO6uwv0MTu08_Shbh9PZKdMV8MY&usqp=CAU"
        }
    ],
    "profile": [
        {
            "id": 1,
            "username": "Sula",
            "balance": 0,
            "phone": "87789857552",
            "avatar": "https://pic.rutubelist.ru/user/3b/27/3b2758ad5492a76b578f7ee072e4e894.jpg",
            "gender": "male",
            "firstname": "Sultan",
            "lastname": "Salibaev",
            "age": 20,
            "currency": "RUB",
            "country": "Kazakhstan",
            "city": "Semey",
            "birth_date": 1046109600000,
            "userId": 1
        },
        {
            "id": 2,
            "userId": 2,
            "email": "in7678523@gmail.com",
            "username": "Hacker",
            "avatar": "https://www.soscanhelp.com/hs-fs/hubfs/Dark%20Web%20Hacker%20Blue%20Glow.jpeg?width=3008&name=Dark%20Web%20Hacker%20Blue%20Glow.jpeg",
            "balance": 0,
            "phone": "87789857552",
            "gender": "male",
            "firstname": "Sultan",
            "lastname": "Salibaev",
            "age": 20,
            "currency": "RUB",
            "country": "Kazakhstan",
            "city": "Semey",
            "birth_date": 1046109600000
        },
        {
            "id": 3,
            "userId": 3,
            "email": "in7678523@gmail.com",
            "username": "Venom",
            "avatar": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQmCeoiFRRe104G9VRAR7esff5uL0XtcL7O6QtXZ2Z_bO6uwv0MTu08_Shbh9PZKdMV8MY&usqp=CAU",
            "balance": 0,
            "phone": "87789857552",
            "gender": "male",
            "firstname": "Sultan",
            "lastname": "Salibaev",
            "age": 20,
            "currency": "RUB",
            "country": "Kazakhstan",
            "city": "Semey",
            "birth_date": 1046109600000
        }
    ]
}